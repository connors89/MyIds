
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import tkinter
from pathlib import Path
from tkinter import messagebox
# import easygui
import spotipy
import oauth2
from spotipy.oauth2 import SpotifyClientCredentials
import concurrent.futures
import os
import yt_dlp
import ffmpeg
import subprocess
import tkinter as tk
from pathlib import Path
import logging
from tkinter import *

# IMAGES :   ----    'image_1.png', 'entry_1.png', 'entry_2.png', 'entry_3.png', 'entry_4.png', 'button_1.png', 'button_2.png', 'button_3.png', 'button_4.png'   ------ 
# Explicit imports to satisfy Flake8
# from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox

"""
DATA_FILES = ['image_1.png', 'entry_1.png', 'entry_2.png', 'entry_3.png', 'entry_4.png', 'button_1.png', 'button_2.png', 'button_3.png', 'button_4.png']
# OPTIONS = {'argv_emulation': False, 'includes': ['tkinter', 'pathlib', 'spotipy', 'spotipy.oauth2' 'concurrent.futures', 'os', 'yt-dlp', 'ffmpeg', 'subprocess', 'logging']}
"""


# $ python setup.py py2app -A

# $ rm -rf build dist

# $ python setup.py py2app



# OUTPUT_PATH = Path(__file__).parent
output_path = str(Path.home() / "Downloads")
# OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = output_path / Path(r"/Users/connorsingh/Desktop/Creatives/Coding Works/PYCHARM/Tkint2/assets/frame0")

# ------------------------------------------------------
# ORDER:
#   Side functions/ main buttons/ converter functions/ GUI



def notify():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    tkinter.messagebox.askyesnocancel(title="Start Download?", message="Do you wish to start download?", )
    root.destroy()


def ClearInput():
    # print("pressed")
    entry_1.delete(0, "end")
    entry_2.delete(0, 'end')
    entry_3.delete(0, 'end')
    entry_4.delete(0, 'end')

# Make pop up window
def popUp():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    messagebox.showinfo("Download Complete", "Please check folders.")
    root.destroy()


# -----------------------------------------------------------------------------
def SpotiButtonTest():
    print(entry_1.get())
    print(entry_1)

def writeButton():
    print("Button has been clicked")
    entry_1.insert("0", "Test")

def deleteButton():
    entry_1.delete("START", "END")

def entryTest():
    print("entry 1 is:", entry_1.get())
    print("entry 1 is:", entry_2.get())
    print("entry 3 is:", entry_3.get())
    print("entry 4 is:", entry_4.get())

# LOGGING ------------------------------------
def setup_logging_file(playlist_name):
    log_file_path = playlist_name.replace(".txt", "_logging.txt")

    # Open the file in write mode ('w'), this will create or overwrite the file
    with open(log_file_path, 'w') as log_file:
        log_file.write('Logging file created\n')

def write_to_logging_file(playlist_name, message):
    log_file_path = playlist_name.replace(".txt", "_logging.txt")

    # Open the file in append mode ('a'), this will append new messages to the existing file
    with open(log_file_path, 'a') as log_file:
        log_file.write(message + '\n')
# --------------------------------------------

# CODE FOR SPOTIFY DOWNLOADER
def spoti():
    # Function to write songs to text file
    def write_tracks(download_dir):  # Pass the download directory as an argument
        message = 'Starting write_tracks'
        write_to_logging_file(playlist_name, message)
        entry_1.insert("0", "Writing songs...")
        with open(playlist_name, 'a', encoding='utf-8') as file:
            for track in playlist['items']:
                track_name = track['track']['name']
                artists = ", ".join([artist['name'] for artist in track['track']['artists']])
                file.write(f"{track_name} - {artists}\n")
        print(f'Success! The playlist tracks have been written to', playlist_name)

        os.makedirs(download_dir, exist_ok=True)  # Create the download directory if it doesn't exist
        message = 'End write_tracks'
        write_to_logging_file(playlist_name, message)

    # Function to download a single YouTube video
    def download_youtube_video(query, output_path):
        message = 'Starting download_youtube_video'
        write_to_logging_file(playlist_name, message)
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': output_path + '.webm',
            'default_search': 'ytsearch',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '320',
            }],
        }
        message = 'End yt-dlp options'
        write_to_logging_file(playlist_name, message)

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:

            message = 'Starting "ydl" download()'
            write_to_logging_file(playlist_name, message)

            ydl.download([query])

            message = 'end "ydl" download()'
            write_to_logging_file(playlist_name, message)
# ----------------------------------------
    # Function to convert .webm to .mp3 using ffmpeg-python
    def convert_to_mp3(input_path, output_path):
        message = 'Starting convert_to_mp3'
        # print(message)
        write_to_logging_file(playlist_name, message)
        input_stream = ffmpeg.input(input_path + '.webm')
        output_stream = ffmpeg.output(input_stream, output_path + '.mp3')
        message = ' still convert_to_mp3'
        write_to_logging_file(playlist_name, message)
        ffmpeg.run(output_stream)

    def convert_to_wav(input_path, output_path):
        input_stream = ffmpeg.input(input_path)
        output_stream = ffmpeg.output(input_stream, output_path + '.wav')
        ffmpeg.run(output_stream)

    # Function to remove .webm files
    def remove_webm_files(folder):
        message = 'Start remove_webm_files'
        write_to_logging_file(playlist_name, message)
        for filename in os.listdir(folder):
            if filename.endswith('.webm') or \
                    filename.endswith('.webm.ytdl') or \
                    filename.endswith('.webm.part') or \
                    filename.endswith('.txt'):
                os.remove(os.path.join(folder, filename))

                # Function to process a list of songs from a .txt file

# -------------------------------------------------------------------------------------------------
    def process_songs_WAV(txt_file, download_dir):  # Pass the download directory as an argument
        # logging message
        message = 'Starting Process_songs'
        write_to_logging_file(playlist_name, message)


        folder_name = os.path.splitext(txt_file)[0]

        with open(txt_file, 'r') as file:
            queries = [f'{line.strip()} audio' for line in file]

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            for query in queries:
                title_artist = query.split(' audio')[0]
                output_path = os.path.join(download_dir, f'{title_artist}')  # Use download_dir here
                executor.submit(download_youtube_video, query, output_path)
        # Wait for all downloads to finish before proceeding
        executor.shutdown()
        # Convert .webm to .mp3 in parallel
        with concurrent.futures.ThreadPoolExecutor(max_workers=6) as converter_executor:
            for query in queries:
                title_artist = query.split(' audio')[0]
                input_path = os.path.join(download_dir, f'{title_artist}.webm')  # Use download_dir here
                output_path = os.path.join(download_dir, f'{title_artist}')  # Use download_dir here
                converter_executor.submit(convert_to_mp3, input_path, output_path)
        # Remove .webm files after conversion
        # remove_webm_files(download_dir)  # Use download_dir here"""
    
    """def process_songs_WAV(txt_file, download_dir):
        playlist_name = os.path.splitext(txt_file)[0]

        with open(txt_file, 'r') as file:
            queries = [f'{line.strip()} audio' for line in file]

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            for query in queries:
                title_artist = query.split(' audio')[0]
                output_path = os.path.join(download_dir, title_artist)  # Use download_dir here
                executor.submit(download_youtube_video, query, output_path)

        # Wait for all downloads to finish before proceeding
        # executor.shutdown()

        # Convert .webm to .mp3 in parallel
        with concurrent.futures.ThreadPoolExecutor(max_workers=6) as converter_executor:
            for query in queries:
                title_artist = query.split(' audio')[0]
                input_path = os.path.join(download_dir, f'{title_artist}.webm')  # Use download_dir here
                output_path = os.path.join(download_dir, title_artist)  # Use download_dir here
                converter_executor.submit(convert_to_mp3, input_path, output_path)

        # Remove .webm files after conversion
        # remove_webm_files(download_dir)  # Use download_dir here"""

    
    

    if __name__ == "__main__":
        print("Welcome to the Spotify to MP3/WAV downloader!")
        # txt_file = 'spd26.txt'  # Replace with the name of your .txt file
        # Set your Spotify API credentials
        client_id = '7aff072cc7f14815bf6b80a654ee1390'
        client_secret = 'a533852ec29b4ec7a20231d81e904b24'
        # Initialize the Spotify API client with the Client Credentials Flow
        sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=client_id, client_secret=client_secret))
        # Specify the Spotify playlist URI (you don't need user-specific playlists for this flow)
        playlist_uri = entry_4.get()
        # MP3_or_WAV = input("\nPress 1 for MP3\nPress 2 for WAV: ")
        # Retrieve the playlist and its tracks
        playlist = sp.playlist_tracks(playlist_uri)
        # Extract and write the track names to a text file
        txt = ".txt"
        Pname = entry_3.get()
        playlist_name = Pname + txt

        # Get the user's "Downloads" folder
        downloads_folder = os.path.expanduser("~/Downloads")
        # downloads_folder = os.path.expanduser("~/")
        script_directory = os.path.dirname(os.path.realpath(__file__))
        os.chdir(script_directory)
        download_dir = os.path.join(downloads_folder, playlist_name.replace(".txt", ""))

        write_tracks(download_dir)  # Pass the download directory as an argument
        process_songs_WAV(playlist_name, download_dir)
        popUp()
        print(f"Downloads are complete! You can find your files in the folder: {download_dir}")

        # Open the directory using the default file manager
        subprocess.run(["open", download_dir])

    entry_1.delete(0, "end")
    entry_2.delete(0, 'end')
    entry_3.delete(0, 'end')
    entry_4.delete(0, 'end')


# -----------------------------------------------------------------------
def button2Test():
    print(entry_1.get())
    print(entry_2.get())


# CODE FOR SOUNDCLOUD DOWNLOADER
def SoundcloudDownload():
    # Get input from GUI
    playlist_url = entry_4.get()
    playlist_name = entry_3.get()
    # entry_1.insert("0", "Writing songs...")

    # Set the Downloads folder path
    downloads_folder = Path.home() / "Downloads"

    # Create a folder with the playlist title within the Downloads folder
    playlist_folder = downloads_folder / playlist_name

    if not os.path.exists(playlist_folder):
        os.makedirs(playlist_folder)

    # Change the current working directory to the new folder
    os.chdir(playlist_folder)

    # Use youtube-dl to download the playlist as WAV files
    subprocess.run(["youtube-dl", "--no-check-certificate", "-i", "--extract-audio", "--audio-format", "wav", "-o",
                    "%(title)s.%(ext)s", playlist_url])

    print(f"Playlist downloaded and saved as WAV files in {playlist_folder} directory")

    # Open the directory when done
    subprocess.run(["open", playlist_folder])

    entry_1.delete(0, "end")
    entry_2.delete(0, 'end')
    entry_3.delete(0, 'end')
    entry_4.delete(0, 'end')
    popUp()


# -----------------------------------------------------------------
# ----------------------------------------------------------------


# CODE FOR GUI
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = tk.Tk()

window.geometry("1096x681")
window.configure(bg = "#393939")


canvas = Canvas(
    window,
    bg = "#393939",
    height = 681,
    width = 1096,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=ClearInput,
    relief="flat"
)
button_1.place(
    x=26.0,
    y=491.0,
    width=122.0,
    height=42.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=485.0,
    y=392.0,
    width=162.0,
    height=46.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=SoundcloudDownload,
    relief="flat"
)
button_3.place(
    x=243.0,
    y=375.0,
    width=193.0,
    height=64.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=spoti,
    relief="flat"
)
button_4.place(
    x=26.0,
    y=375.0,
    width=193.0,
    height=64.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    910.5,
    309.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=779.0,
    y=262.0,
    width=263.0,
    height=93.0
)

canvas.create_text(
    768.0,
    234.0,
    anchor="nw",
    text="Messages:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    566.0,
    275.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=501.0,
    y=259.0,
    width=130.0,
    height=30.0
)

canvas.create_text(
    475.0,
    235.0,
    anchor="nw",
    text="Format:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    206.0,
    275.0,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=42.0,
    y=259.0,
    width=328.0,
    height=30.0
)

canvas.create_text(
    30.0,
    225.0,
    anchor="nw",
    text="Enter new playlist name:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    529.0,
    162.5,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#8F8F8F",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=46.5,
    y=142.0,
    width=965.0,
    height=39.0
)

canvas.create_text(
    30.0,
    109.0,
    anchor="nw",
    text="Enter Link:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    990.0,
    51.0,
    image=image_image_1
)

canvas.create_text(
    460.0,
    27.0,
    anchor="nw",
    text="My-Id’s",
    fill="#FFFFFF",
    font=("AnonymousPro Regular", 48 * -1)
)
window.resizable(False, False)
window.mainloop()


"""
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


# --------------------------------------------

window = Tk()

window.geometry("1092x681")
window.configure(bg = "#393939")


canvas = Canvas(
    window,
    bg = "#393939",
    height = 681,
    width = 1092,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

# Header bar
canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1171.0,
    97.0,
    fill="#91A0A4",
    outline="")

# MYId Header Text
canvas.create_text(
    499.0,
    18.0,
    anchor="nw",
    text="My-Id’s",
    fill="#000000",
    font=("Lato Regular", 48 * -1)
)
# Enter Tink Text
canvas.create_text(
    30.0,
    109.0,
    anchor="nw",
    text="Enter Link:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)
# Supports words on bottom
canvas.create_text(
    20.0,
    584.0,
    anchor="nw",
    text="Supports:\nSpotify\nSoundCloud",
    fill="#FFFFFF",
    font=("Lato Regular", 24 * -1)
)

# LINK ENTRY
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    546.0,
    162.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=46.5,
    y=142.0,
    width=999.0,
    height=39.0
)

# Convert Spotify Button
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=SpotifyRun,
    relief="flat"
)
button_1.place(
    x=26.0,
    y=375.0,
    width=193.0,
    height=64.0
)

# Convert Soundcloud Button
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=button2Test,
    relief="flat"
)
button_2.place(
    x=197.0,
    y=375.0,
    width=260.0,
    height=64.0
)

canvas.create_text(
    30.0,
    225.0,
    anchor="nw",
    text="Enter new playlist name:",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

# Folder Name Entry
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    206.0,
    275.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=42.0,
    y=259.0,
    width=328.0,
    height=30.0
)
window.resizable(False, False)
window.mainloop()
"""


